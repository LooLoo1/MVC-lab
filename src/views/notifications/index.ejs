<%- include('../partials/header') %>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="md:flex md:items-center md:justify-between mb-6">
        <div class="flex-1 min-w-0">
            <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                Notifications
            </h2>
        </div>
        <div class="mt-4 flex md:mt-0 md:ml-4">
            <button onclick="markAllAsRead()" 
                    class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <i class="fas fa-check-double mr-2"></i>
                Mark all as read
            </button>
        </div>
    </div>

    <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <ul role="list" class="divide-y divide-gray-200">
            <% if (notifications.length === 0) { %>
                <li class="px-6 py-4 text-center text-gray-500">
                    No notifications yet
                </li>
            <% } else { %>
                <% notifications.forEach(notification => { %>
                    <li class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150" data-notification-id="<%= notification._id %>">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <% if (!notification.read) { %>
                                        <div class="h-2 w-2 rounded-full bg-indigo-600"></div>
                                    <% } %>
                                </div>
                                <div class="ml-4">
                                    <div class="flex items-center">
                                        <p class="text-sm font-medium text-gray-900">
                                            <%= notification.title %>
                                        </p>
                                        <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                            <%= notification.type.replace('_', ' ') %>
                                        </span>
                                    </div>
                                    <p class="text-sm text-gray-500">
                                        <%= notification.message %>
                                    </p>
                                    <div class="mt-1 text-xs text-gray-400">
                                        <%= new Date(notification.createdAt).toLocaleString() %>
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center space-x-4">
                                <% if (notification.link) { %>
                                    <a href="<%= notification.link %>" 
                                       onclick="markAsRead('<%= notification._id %>')"
                                       class="text-indigo-600 hover:text-indigo-900">
                                        <i class="fas fa-external-link-alt"></i>
                                    </a>
                                <% } %>
                                <button onclick="deleteNotification('<%= notification._id %>')"
                                        class="text-red-600 hover:text-red-900">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </li>
                <% }); %>
            <% } %>
        </ul>
    </div>
</div>

<script>
function markAllAsRead() {
    fetch('/notifications/read-all', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.error || 'Failed to mark notifications as read');
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            window.location.reload();
        } else {
            throw new Error(data.error || 'Failed to mark notifications as read');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showError(error.message || 'Failed to mark notifications as read');
    });
}

function markAsRead(notificationId) {
    fetch(`/notifications/${notificationId}/read`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.error || 'Failed to mark notification as read');
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            const notification = document.querySelector(`[data-notification-id="${notificationId}"]`);
            const unreadDot = notification.querySelector('.h-2.w-2');
            if (unreadDot) {
                unreadDot.remove();
            }
        } else {
            throw new Error(data.error || 'Failed to mark notification as read');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showError(error.message || 'Failed to mark notification as read');
    });
}

function deleteNotification(notificationId) {
    fetch(`/notifications/${notificationId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.error || 'Failed to delete notification');
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            const notification = document.querySelector(`[data-notification-id="${notificationId}"]`);
            notification.remove();
            showSuccess('Notification deleted successfully');
        } else {
            throw new Error(data.error || 'Failed to delete notification');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showError(error.message || 'Failed to delete notification');
    });
}

function showSuccess(message) {
    const successMessage = document.createElement('div');
    successMessage.className = 'fixed top-4 right-4 bg-green-50 border-l-4 border-green-400 p-4 z-50 animate-fade-in-down';
    successMessage.innerHTML = `
        <div class="flex">
            <div class="flex-shrink-0">
                <i class="fas fa-check-circle text-green-400"></i>
            </div>
            <div class="ml-3">
                <p class="text-sm text-green-700">
                    ${message}
                </p>
            </div>
        </div>
    `;
    document.body.appendChild(successMessage);
    setTimeout(() => {
        successMessage.remove();
    }, 3000);
}

function showError(message) {
    const errorMessage = document.createElement('div');
    errorMessage.className = 'fixed top-4 right-4 bg-red-50 border-l-4 border-red-400 p-4 z-50 animate-fade-in-down';
    errorMessage.innerHTML = `
        <div class="flex">
            <div class="flex-shrink-0">
                <i class="fas fa-exclamation-circle text-red-400"></i>
            </div>
            <div class="ml-3">
                <p class="text-sm text-red-700">
                    ${message}
                </p>
            </div>
        </div>
    `;
    document.body.appendChild(errorMessage);
    setTimeout(() => {
        errorMessage.remove();
    }, 3000);
}
</script>

<style>
@keyframes fade-in-down {
    0% {
        opacity: 0;
        transform: translateY(-10px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate-fade-in-down {
    animation: fade-in-down 0.3s ease-out;
}
</style>

<%- include('../partials/footer') %> 